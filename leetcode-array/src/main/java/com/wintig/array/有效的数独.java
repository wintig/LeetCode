package com.wintig.array;

/**
 *
 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

 数字 1-9 在每一行只能出现一次。
 数字 1-9 在每一列只能出现一次。
 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


 上图是一个部分填充的有效的数独。

 数独部分空格内已填入了数字，空白格用 '.' 表示。

 示例 1:

 输入:
 [
 ["5","3",".",".","7",".",".",".","."],
 ["6",".",".","1","9","5",".",".","."],
 [".","9","8",".",".",".",".","6","."],
 ["8",".",".",".","6",".",".",".","3"],
 ["4",".",".","8",".","3",".",".","1"],
 ["7",".",".",".","2",".",".",".","6"],
 [".","6",".",".",".",".","2","8","."],
 [".",".",".","4","1","9",".",".","5"],
 [".",".",".",".","8",".",".","7","9"]
 ]
 输出: true
 示例 2:

 输入:
 [
 ["8","3",".",".","7",".",".",".","."],
 ["6",".",".","1","9","5",".",".","."],
 [".","9","8",".",".",".",".","6","."],
 ["8",".",".",".","6",".",".",".","3"],
 ["4",".",".","8",".","3",".",".","1"],
 ["7",".",".",".","2",".",".",".","6"],
 [".","6",".",".",".",".","2","8","."],
 [".",".",".","4","1","9",".",".","5"],
 [".",".",".",".","8",".",".","7","9"]
 ]
 输出: false
 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 说明:

 一个有效的数独（部分已被填充）不一定是可解的。
 只需要根据以上规则，验证已经填入的数字是否有效即可。
 给定数独序列只包含数字 1-9 和字符 '.' 。
 给定数独永远是 9x9 形式的。

 https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/30/
 * @author shitian
 * @create 2018-07-27 下午11:57
 */
public class 有效的数独 {

    public static void main(String[] args) {

        char[][] board = {
                {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };

        char[][] board2 =
                {
                {'.','.','.',  '.','5','.',    '.','1','.'},
                {'.','4','.',  '3','.','.',    '.','.','.'},
                {'.','.','.',  '.','.','3',    '.','.','1'},

                {'8','.','.',  '.','.','.',    '.','2','.'},
                {'.','.','2',  '.','7','.',    '.','.','.'},
                {'.','1','5',  '.','.','.',    '.','.','.'},

                {'.','.','.',  '.','.','2',    '.','.','.'},
                {'.','2','.',  '9','.','.',    '.','.','.'},
                {'.','.','4',  '.','.','.',    '.','.','.'}
        };

        char[][] board3 =
        {
                {'5', '3', '.',    '.', '7', '.',    '.', '.', '.'},
                {'6', '.', '.',    '1', '9', '5',    '.', '.', '.'},
                {'.', '9', '8',    '.', '.', '.',    '.', '6', '.'},

                {'8', '.', '.',    '.', '6', '.',    '.', '.', '3'},
                {'4', '.', '.',    '8', '.', '3',    '.', '.', '1'},
                {'7', '.', '.',    '.', '2', '.',    '.', '.', '6'},

                {'.', '6', '.',    '.', '.', '.',    '2', '8', '.'},
                {'.', '.', '.',    '4', '1', '9',    '.', '.', '5'},
                {'.', '.', '.',    '.', '8', '.',    '.', '7', '9'}
        };

        System.out.println(isValidSudoku1());

    }

    public static boolean isValidSudoku1() {

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.println("i : "+ (3 * (i/3) + j/3) + " j : "+ (3 * (i % 3) + j % 3));
            }

            System.out.println();
        }

        return true;
    }




    public static boolean isValidSudoku(char[][] board) {



        // 检查每一行
        for (int i = 0; i < 9; i++) {

            int row[] = new int[10];
            int rel[] = new int[10];

            for (int j = 0; j < board[i].length; j++) {

                if (board[i][j] != '.') {
                    row[board[i][j] - '0']++;
                    if (row[board[i][j] - '0'] > 1) {
                        return false;
                    }
                }

                if (board[j][i] != '.') {
                    rel[board[i][j] - '0']++;
                    if (rel[board[j][i] - '0'] > 1) {
                        return false;
                    }
                }


            }
        }


        // 检查每一列
        for (int i = 0; i < 9; i++) {

            int col[] = new int[10];

            for (int j = 0; j < 9; j++) {

                if (board[j][i] == '.') {
                    continue;
                }


            }
        }




        return true;
    }

}
